name: 'Monolith Compile and Upload'
description: 'Monolith Compile and Upload action'

inputs:
  github_ref_name:
    description: 'GitHub ref_name property'
    required: true
  github_sha:
    description: 'GitHub sha property'
    required: true
  s3_bucket:
    description: 'S3 Bucket name'
    required: true
  s3_folder:
    description: 'S3 Folder name. Optional'
    required: false
  compile_app:
    description: 'Specific app such as care, eapi, signup or default'
    required: false
    default: ''
  custom_access_token:
    description: 'AWS Custom GitHub Access Token'
    required: true
  aws_access_key:
    description: 'AWS Access Key (Required if no aws-actions/configure-aws-credentials)'
    required: true
  aws_secret_key:
    description: 'AWS Secret Key (Required if no aws-actions/configure-aws-credentials)'
    required: true
  aws_region:
    description: 'AWS Region'
    required: false
    default: 'us-east-1'

runs:
  using: 'composite'
  steps:
    - name: Determine Compile App
      id: app
      shell: powershell
      run: |
        Switch ("${{ inputs.compile_app }}")
        {
            "care" {
              $compiled_folder = "Care"
              $deploy_folder = "care"
            }
            "eapi" {
              $compiled_folder = "External.Api"
              $deploy_folder = "external_api"
            }
            "signup" {
              $compiled_folder = "Suite.Signup"
              $deploy_folder = "signup"
            }
            default {
              $compiled_folder="*"
              $deploy_folder="appdev"
            }
        }

        echo "Compiled folder = $compiled_folder Deploy folder = $deploy_folder"

        "compiled_folder=$compiled_folder" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        "deploy_folder=$deploy_folder" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Read back values
      shell: powershell
      env:
        compiled_folder: ${{ steps.app.outputs.compiled_folder }}
        work_dir: ${{ steps.aws-work.outputs.work_dir }}
      run: |
        echo "Using PatriotSoftware.$compiled_folder.Compiled"
        echo "Work directory C:\actions-runner\_work\PatriotSoftware\PatriotSoftware\aws\$work_dir\deploy"

    - name: Monolith Code
      uses: actions/checkout@v4
      with:
        # Disabling shallow clone is recommended for improving relevancy of sonarqube reporting
        fetch-depth: 1     

    - name: Install VSSetup PowerShell Module
      shell: pwsh
      run: |
        Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
        Install-Module VSSetup -Scope CurrentUser -Force -AllowClobber
      
    - name: Authenticate with Dev
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.aws_access_key }}
        aws-secret-access-key: ${{ inputs.aws_secret_key }}
        aws-region: ${{ inputs.aws_region }}
  
    - name: Copy NuGet 
      shell: powershell
      run: aws s3 cp s3://dev-ci-nuget-config/NuGet.Config "C:\Program Files (x86)\NuGet\Config\NuGet.config"
    
    - name: Restore nuget packages 
      shell: powershell
      run: nuget restore src\PatriotSoftware.sln -Verbosity quiet

    - name: Compile
      shell: powershell
      run: .\build2.bat compile
   
    - name: Copy abcpdf8-32 
      shell: powershell
      run: |
        Get-ChildItem -Path artifacts -Recurse -Directory -Force -ErrorAction SilentlyContinue | Select-Object FullName
        .\build2.bat copy_extra_assemblies

    - name: Precompile Websites
      shell: powershell
      run: .\build2.bat precompile_websites

    - name: Transform All Configs
      shell: powershell
      run: .\build2.bat transform_all_configs

    - name: AwsDeploy Code
      uses: actions/checkout@v4      
      with:
        repository: SynergyDataSystems/PatriotSoftware.AwsDeploy
        token: ${{ inputs.custom_access_token }}
        path: .\aws

    - name: TEMP Directory Listing
      shell: powershell
      run: |
        echo "TEMP DIRECTORY LISTING"
        Get-ChildItem -Path . –Recurse

    - name: Extract branch name
      id: extract_branch
      shell: powershell
      run: |
        $branch = "${{ inputs.github_ref_name }}"
        $clean_branch = $branch.ToLower() -replace '_','' | Out-String
        if ($branch.Length -gt 38) {
          $clean_branch = $clean_branch.SubString(0,38)
        }
        "CLEAN_BRANCH=$clean_branch" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Combine AwsDeploy with Monolith code
      id: aws-work
      env:
        dev_folder_name: ${{ steps.extract_branch.outputs.CLEAN_BRANCH }}
        deploy_folder: ${{ steps.app.outputs.deploy_folder }}
      run: |
        echo "Deploy folder: $deploy_folder"
        
        $work_dir = "C:\actions-runner\_work\PatriotSoftware\PatriotSoftware\aws\signup\deploy"
      
        echo "Work dir = $work_dir"

        mkdir $work_dir\wwwroot
        (Get-Content $work_dir\install_script.ps1).Replace('dev_folder_name = "master"', 'dev_folder_name = "$dev_folder_name"') | Set-Content $work_dir\install_script.ps1    

        "work_dir=$work_dir" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append       
      shell: powershell

# gci -Recurse -Filter *.csproj |
# % { (get-content "$($_.FullName)")
# .Replace('<TargetFramework>net47</TargetFramework>', '<TargetFramework>net462</TargetFramework>') |
#  Set-Content "$($_.FullName)"}

    - name: Copy Compiled Folder(s)
      env:
        compiled_folder: ${{ steps.app.outputs.compiled_folder }}
        work_dir: ${{ steps.aws-work.outputs.work_dir }}
      run: |
        echo "Using PatriotSoftware.$compiled_folder.Compiled"
        Copy-Item -Path artifacts\PublishedWebsites\PatriotSoftware.Signup.Suite.Compiled -Destination $work_dir\wwwroot -Recurse
      shell: powershell

    - name: Zip File Name
      id: filename
      run: |
        $branch = "${{ steps.extract_branch.outputs.CLEAN_BRANCH }}"
                
        if ( $branch -eq "main" -Or $branch -eq "master" ) {
          echo "Main branch, using github sha 10-digits"
          $branch = ("${{ inputs.github_sha }}").SubString(0,10)
        }

        "name=$branch" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
      shell: powershell

    - name: Zip File Path
      id: aws_path
      run: |        
        $aws_path = "${{ inputs.s3_bucket }}"
        $s3folder = "${{ inputs.s3_folder }}"
        if (![string]::IsNullOrEmpty($s3folder)) {
          echo "Using s3 folder provided"
          $aws_path += "/" + $s3folder
        }

        "path=$aws_path" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
      shell: powershell

    - name: Upload Artifact Zip to Dev
      env:
        deploy_folder: ${{ steps.app.outputs.deploy_folder }}   
      run: |        
        $filename = "${{ steps.filename.outputs.name }}"
        $aws_path = "${{ steps.aws_path.outputs.path }}"

        echo "Directory listing..."
        Get-ChildItem -Path . –Recurse

        $compress = @{
          Path = "C:\actions-runner\_work\PatriotSoftware\PatriotSoftware\aws\$deploy_folder\*"
          CompressionLevel = "Fastest"
          DestinationPath = "C:\artifacts\tests.zip"
        }
        mkdir c:\artifacts
        Compress-Archive @compress
        
        echo "Copying to s3://$aws_path/${filename}.zip"
        aws s3 cp "C:\artifacts\tests.zip" s3://$aws_path/$filename.zip
      shell: powershell
