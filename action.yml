name: 'Monolith Compile and Upload'
description: 'Monolith Compile and Upload action'

inputs:
  github_ref_name:
    description: 'GitHub ref_name property'
    required: true
  github_sha:
    description: 'GitHub sha property'
    required: true
  s3_bucket:
    description: 'S3 Bucket name'
    required: true
  s3_folder:
    description: 'S3 Folder name. Optional'
    required: false
  custom_access_token:
    description: 'AWS Custom GitHub Access Token'
    required: true
  aws_access_key:
    description: 'AWS Access Key (Required if no aws-actions/configure-aws-credentials)'
    required: true
  aws_secret_key:
    description: 'AWS Secret Key (Required if no aws-actions/configure-aws-credentials)'
    required: true
  aws_region:
    description: 'AWS Region'
    required: false
    default: 'us-east-1'

runs:
  using: 'composite'
  steps:
    - name: Monolith Code
      uses: actions/checkout@v4
      with:
        # Disabling shallow clone is recommended for improving relevancy of sonarqube reporting
        fetch-depth: 1     

    - name: Java Install
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
      
    - name: Dev Authenticate
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.aws_access_key }}
        aws-secret-access-key: ${{ inputs.aws_secret_key }}
        aws-region: ${{ inputs.aws_region }}
  
    # - name: Copy NuGet 
    #   shell: powershell
    #   run: aws s3 cp s3://dev-ci-nuget-config/NuGet.Config "C:\Program Files (x86)\NuGet\Config\NuGet.config"
    
    # - name: Restore nuget packages 
    #   shell: powershell
    #   run: nuget restore src\PatriotSoftware.sln -Verbosity quiet
      
    # - name: Build and analyze
    #   shell: powershell
    #   run: |
    #     $base_dir = "C:\actions-runner\_work\PatriotSoftware\PatriotSoftware\artifacts"
    #     $bin_dir = "$base_dir\bin"	
    #     mkdir $bin_dir
    #     msbuild src\PatriotSoftware.sln /m /p:Platform="x64" /t:Rebuild /p:Configuration="Dev" /p:OutDir="$bin_dir" /p:ExeProjectOutputDir="$base_dir\ScheduledTasks"
    #     mv "$bin_dir\_PublishedWebsites" "$base_dir\PublishedWebsites"
        
    # - name: Copy abcpdf8-32 
    #   shell: powershell
    #   run: |
    #     Get-ChildItem -Path artifacts -Recurse -Directory -Force -ErrorAction SilentlyContinue | Select-Object FullName
    #     .\build2.bat copy_extra_assemblies

    # - name: Precompile websites 
    #   shell: powershell
    #   run: |           
    #     Import-Module '.\build\tools\psake\psake.psm1'
    #     $psake.use_exit_on_error = $true
    #     Invoke-psake .\build\build2.ps1 precompile_websites 

    # - name: AwsDeploy Code
    #   uses: actions/checkout@v4
    #   with:
    #     repository: SynergyDataSystems/PatriotSoftware.AwsDeploy
    #     token: ${{ inputs.custom_access_token }}
    #     path: .\deploy\appdev

    - name: Extract branch name
      id: extract_branch
      shell: powershell
      env:
        branch: "${{ inputs.github_ref_name }}"
      run: |
        $clean_branch = $branch.ToLower() -replace '_','' | Out-String
        if ($branch.Length -gt 38) {
          $clean_branch = $clean_branch.SubString(0,38)
        }
        "clean-branch=$clean_branch" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    # - name: Combine AwsDeploy with Monolith code
    #   env:
    #     dev_folder_name: ${{ steps.extract_branch.outputs.clean-branch }}
    #   run: |
    #     $work_dir = "C:\actions-runner\_work\PatriotSoftware\PatriotSoftware\deploy\appdev\deploy\appdev\deploy"
    #     mkdir $work_dir\wwwroot
    #     (Get-Content $work_dir\install_script.ps1).Replace('dev_folder_name = "master"', 'dev_folder_name = "$dev_folder_name"') | Set-Content $work_dir\install_script.ps1
    #     Copy-Item -Path artifacts\PublishedWebsites\*.Compiled -Destination $work_dir\wwwroot -Recurse    
    #   shell: powershell  

    - name: Zip Artifact
      id: artifact
      env:
        branch: "${{ steps.extract_branch.outputs.clean-branch }}"
      run: |
        # $compress = @{
        #   Path = "C:\actions-runner\_work\PatriotSoftware\PatriotSoftware\deploy\appdev\deploy\appdev\*"
        #   CompressionLevel = "Fastest"
        #   DestinationPath = "C:\artifacts\tests.zip"
        # }
        # mkdir c:\artifacts
        # Compress-Archive @compress
        if ( $branch -eq "main" -Or $branch -eq "master" ) {
          echo "Main branch, using github sha 10-digits"
          $branch = ("${{ inputs.github_sha }}").SubString(0,10)
        }

        echo "filename=$branch" >> $GITHUB_OUTPUT
      shell: powershell

    - name: Upload Artifact Zip to Dev      
      env:
        filename: "${{ steps.artifact.outputs.filename }}"
        s3bucket: "${{ inputs.s3_bucket }}"
        s3folder: "${{ inputs.s3_folder }}"
      run: |
        $awsPath=$s3bucket
        echo "Bucket:$s3bucket Folder:$s3folder"
        if ([string]::IsNullOrEmpty($s3folder)) {
          echo "Using s3 folder provided"
          $awsPath += "/" + $s3folder
        }
        echo "Copying to s3://$awsPath/$filename.zip"
        # aws s3 cp "C:\artifacts\tests.zip" s3://$awsPath/$filename.zip
      shell: powershell
